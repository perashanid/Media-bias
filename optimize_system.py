#!/usr/bin/env python3
"""
System optimization and cleanup script
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def clean_python_cache():
    """Clean Python cache files"""
    print("Cleaning Python cache files...")
    
    cache_patterns = ['__pycache__', '*.pyc', '*.pyo', '.pytest_cache']
    cleaned_count = 0
    
    for root, dirs, files in os.walk('.'):
        # Remove __pycache__ directories
        if '__pycache__' in dirs:
            cache_dir = os.path.join(root, '__pycache__')
            shutil.rmtree(cache_dir)
            cleaned_count += 1
            print(f"  Removed: {cache_dir}")
        
        # Remove .pytest_cache directories
        if '.pytest_cache' in dirs:
            cache_dir = os.path.join(root, '.pytest_cache')
            shutil.rmtree(cache_dir)
            cleaned_count += 1
            print(f"  Removed: {cache_dir}")
        
        # Remove .pyc and .pyo files
        for file in files:
            if file.endswith(('.pyc', '.pyo')):
                file_path = os.path.join(root, file)
                os.remove(file_path)
                cleaned_count += 1
                print(f"  Removed: {file_path}")
    
    print(f"Cleaned {cleaned_count} cache files/directories")

def optimize_frontend():
    """Optimize frontend build"""
    print("Optimizing frontend...")
    
    frontend_dir = Path("frontend")
    if not frontend_dir.exists():
        print("  Frontend directory not found")
        return
    
    # Check if build exists and is recent
    build_dir = frontend_dir / "build"
    if build_dir.exists():
        print("  Frontend build already exists")
        return
    
    # Build frontend for production
    try:
        result = subprocess.run(
            ["npm", "run", "build"],
            cwd=frontend_dir,
            capture_output=True,
            text=True,
            timeout=120
        )
        
        if result.returncode == 0:
            print("  Frontend build completed successfully")
        else:
            print(f"  Frontend build failed: {result.stderr}")
    
    except subprocess.TimeoutExpired:
        print("  Frontend build timed out")
    except Exception as e:
        print(f"  Frontend build error: {e}")

def create_logs_directory():
    """Create logs directory if it doesn't exist"""
    print("Setting up logs directory...")
    
    logs_dir = Path("logs")
    if not logs_dir.exists():
        logs_dir.mkdir()
        print("  Created logs directory")
        
        # Create .gitkeep file
        gitkeep = logs_dir / ".gitkeep"
        gitkeep.touch()
        print("  Created .gitkeep file")
    else:
        print("  Logs directory already exists")

def optimize_requirements():
    """Create optimized requirements file"""
    print("Optimizing requirements...")
    
    # Create a minimal requirements file for production
    minimal_requirements = [
        "pymongo>=4.6.0",
        "flask>=3.0.0",
        "flask-cors>=4.0.0",
        "requests>=2.31.0",
        "beautifulsoup4>=4.12.0",
        "lxml>=4.9.0",
        "scikit-learn>=1.7.0",
        "nltk>=3.9.0",
        "python-dotenv>=1.0.0",
        "apscheduler>=3.10.0"
    ]
    
    with open("requirements_production.txt", "w") as f:
        f.write("# Production requirements for Media Bias Detection System\n")
        f.write("# Generated by optimize_system.py\n\n")
        for req in minimal_requirements:
            f.write(f"{req}\n")
    
    print("  Created requirements_production.txt")

def check_security():
    """Basic security checks"""
    print("Running security checks...")
    
    security_issues = []
    
    # Check for sensitive files
    sensitive_patterns = ['.env', '*.key', '*.pem', 'secrets.*']
    
    for pattern in sensitive_patterns:
        for file_path in Path('.').rglob(pattern):
            if file_path.name not in ['.env.example', '.env.development', '.env.production']:
                security_issues.append(f"Sensitive file found: {file_path}")
    
    # Check for hardcoded secrets in Python files
    for py_file in Path('.').rglob('*.py'):
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read().lower()
                
                # Check for common secret patterns
                secret_patterns = ['password=', 'secret=', 'api_key=', 'token=']
                for pattern in secret_patterns:
                    if pattern in content and 'example' not in content and 'test' not in content:
                        security_issues.append(f"Potential hardcoded secret in {py_file}")
                        break
        except:
            continue
    
    if security_issues:
        print("  Security issues found:")
        for issue in security_issues:
            print(f"    - {issue}")
    else:
        print("  No obvious security issues found")

def generate_deployment_checklist():
    """Generate deployment checklist"""
    print("Generating deployment checklist...")
    
    checklist = """# Deployment Checklist

## Pre-deployment
- [ ] All tests passing
- [ ] Security review completed
- [ ] Environment variables configured
- [ ] Database connection tested
- [ ] SSL certificates ready
- [ ] Domain/DNS configured

## Infrastructure
- [ ] MongoDB instance running
- [ ] Redis cache configured (optional)
- [ ] Load balancer configured (if needed)
- [ ] Monitoring tools set up
- [ ] Backup strategy implemented

## Application
- [ ] Production build created
- [ ] Environment variables set
- [ ] Database migrations run
- [ ] Static files served correctly
- [ ] API endpoints tested
- [ ] Frontend accessible

## Security
- [ ] HTTPS enabled
- [ ] CORS configured
- [ ] Rate limiting enabled
- [ ] Input validation active
- [ ] Error handling secure
- [ ] Logs configured

## Monitoring
- [ ] Health checks working
- [ ] Error tracking active
- [ ] Performance monitoring set up
- [ ] Alerting configured
- [ ] Log aggregation working

## Post-deployment
- [ ] Smoke tests passed
- [ ] Performance acceptable
- [ ] Monitoring active
- [ ] Documentation updated
- [ ] Team notified
"""
    
    with open("DEPLOYMENT_CHECKLIST.md", "w") as f:
        f.write(checklist)
    
    print("  Created DEPLOYMENT_CHECKLIST.md")

def show_system_info():
    """Show system information"""
    print("\nSystem Information:")
    print("=" * 50)
    
    # Python version
    print(f"Python Version: {sys.version}")
    
    # Project structure
    print("\nProject Structure:")
    important_dirs = ['api', 'services', 'models', 'scrapers', 'frontend', 'config', 'tests']
    for dir_name in important_dirs:
        if os.path.exists(dir_name):
            file_count = len(list(Path(dir_name).rglob('*.py'))) if dir_name != 'frontend' else len(list(Path(dir_name).rglob('*.tsx')))
            print(f"  {dir_name}/: {file_count} files")
    
    # Frontend build status
    frontend_build = Path("frontend/build")
    if frontend_build.exists():
        print(f"\nFrontend: Built (size: {sum(f.stat().st_size for f in frontend_build.rglob('*') if f.is_file()) // 1024} KB)")
    else:
        print("\nFrontend: Not built")
    
    # Database status
    print("\nDatabase: Mock (MongoDB not connected)")
    
    print("\nOptimization Complete!")

def main():
    """Run all optimization tasks"""
    print("Media Bias Detection System - Optimization")
    print("=" * 50)
    
    tasks = [
        clean_python_cache,
        create_logs_directory,
        optimize_requirements,
        optimize_frontend,
        check_security,
        generate_deployment_checklist,
        show_system_info
    ]
    
    for task in tasks:
        try:
            task()
            print()
        except Exception as e:
            print(f"Error in {task.__name__}: {e}")
            print()
    
    print("All optimization tasks completed!")

if __name__ == "__main__":
    main()